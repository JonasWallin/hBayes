// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sample_gibbs_beta_logistic_cpp
Rcpp::List sample_gibbs_beta_logistic_cpp(const arma::vec& Y, arma::vec& Xbeta, const arma::mat& X, arma::vec& beta, arma::ivec& betaind, const arma::vec& avec, const arma::vec& pivec, int innersample, double interval_sample);
RcppExport SEXP _NPBayes_sample_gibbs_beta_logistic_cpp(SEXP YSEXP, SEXP XbetaSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP betaindSEXP, SEXP avecSEXP, SEXP pivecSEXP, SEXP innersampleSEXP, SEXP interval_sampleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Xbeta(XbetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type betaind(betaindSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type avec(avecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pivec(pivecSEXP);
    Rcpp::traits::input_parameter< int >::type innersample(innersampleSEXP);
    Rcpp::traits::input_parameter< double >::type interval_sample(interval_sampleSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_gibbs_beta_logistic_cpp(Y, Xbeta, X, beta, betaind, avec, pivec, innersample, interval_sample));
    return rcpp_result_gen;
END_RCPP
}
// sample_gibbs_beta_normal_cpp
Rcpp::List sample_gibbs_beta_normal_cpp(const arma::vec& Y, arma::vec& Xbeta, const arma::mat& X, const double sigma, const arma::vec& X2diag, arma::vec& beta, arma::ivec& betaind, const arma::vec& avec, const arma::vec& pivec, int innersample, double interval_sample);
RcppExport SEXP _NPBayes_sample_gibbs_beta_normal_cpp(SEXP YSEXP, SEXP XbetaSEXP, SEXP XSEXP, SEXP sigmaSEXP, SEXP X2diagSEXP, SEXP betaSEXP, SEXP betaindSEXP, SEXP avecSEXP, SEXP pivecSEXP, SEXP innersampleSEXP, SEXP interval_sampleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Xbeta(XbetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type X2diag(X2diagSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type betaind(betaindSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type avec(avecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pivec(pivecSEXP);
    Rcpp::traits::input_parameter< int >::type innersample(innersampleSEXP);
    Rcpp::traits::input_parameter< double >::type interval_sample(interval_sampleSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_gibbs_beta_normal_cpp(Y, Xbeta, X, sigma, X2diag, beta, betaind, avec, pivec, innersample, interval_sample));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello
List rcpp_hello();
RcppExport SEXP _NPBayes_rcpp_hello() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NPBayes_sample_gibbs_beta_logistic_cpp", (DL_FUNC) &_NPBayes_sample_gibbs_beta_logistic_cpp, 9},
    {"_NPBayes_sample_gibbs_beta_normal_cpp", (DL_FUNC) &_NPBayes_sample_gibbs_beta_normal_cpp, 11},
    {"_NPBayes_rcpp_hello", (DL_FUNC) &_NPBayes_rcpp_hello, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_NPBayes(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
